(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{347:function(t,s,a){"use strict";a.r(s);var e=a(33),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[t._v("#")]),t._v(" Redis")]),t._v(" "),a("h2",{attrs:{id:"redis是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis是什么"}},[t._v("#")]),t._v(" Redis是什么")]),t._v(" "),a("p",[t._v("Redis是一个开源的，可持久化的内存数据结构存储服务，可用作数据库、缓存、消息代理。")]),t._v(" "),a("p",[t._v("它支持多种数据结构如string，list，hash，set，sorted set，bitmap，stream等。")]),t._v(" "),a("p",[t._v("并且，它还提供了Redis sentinel、Redis cluster两种高可用架构。")]),t._v(" "),a("h2",{attrs:{id:"redis-为什么快"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-为什么快"}},[t._v("#")]),t._v(" Redis 为什么快")]),t._v(" "),a("ol",[a("li",[t._v("单线程")]),t._v(" "),a("li",[t._v("底层是IO多路复用机制")])]),t._v(" "),a("h2",{attrs:{id:"redis-数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-数据结构"}},[t._v("#")]),t._v(" Redis 数据结构")]),t._v(" "),a("h3",{attrs:{id:"基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),a("ul",[a("li",[t._v("Binary-safe strings")]),t._v(" "),a("li",[t._v("Hashes")]),t._v(" "),a("li",[t._v("Lists")]),t._v(" "),a("li",[t._v("Sets")]),t._v(" "),a("li",[t._v("Sorted sets")])]),t._v(" "),a("h3",{attrs:{id:"高级数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高级数据类型"}},[t._v("#")]),t._v(" 高级数据类型")]),t._v(" "),a("ul",[a("li",[t._v("bitmaps（位图）")]),t._v(" "),a("li",[t._v("HyperLogLogs")]),t._v(" "),a("li",[t._v("Streams")])]),t._v(" "),a("h3",{attrs:{id:"底层数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#底层数据结构"}},[t._v("#")]),t._v(" 底层数据结构")]),t._v(" "),a("p",[a("strong",[t._v("主要理解sds和skiplist，面试中问的比较多，其他的了解即可。")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("dict（字典）")])]),t._v(" "),a("li",[a("p",[t._v("sds（可扩展字符串）")])]),t._v(" "),a("li",[a("p",[t._v("robj（Redis对象）")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* in server.h */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* The actual Redis Object */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_STRING 0    ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* String object. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_LIST 1      ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* List object. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_SET 2       ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Set object. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_ZSET 3      ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Sorted set object. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_HASH 4      ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Hash object. */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Objects encoding. Some kind of objects like Strings and Hashes can be\n * internally represented in multiple ways. The 'encoding' field of the object\n * is set to one of this fields for this object. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_ENCODING_RAW 0     ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Raw representation */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_ENCODING_INT 1     ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Encoded as integer */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_ENCODING_HT 2      ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Encoded as hash table */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_ENCODING_ZIPMAP 3  ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Encoded as zipmap */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_ENCODING_LINKEDLIST 4 ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* No longer used: old list encoding. */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_ENCODING_ZIPLIST 5 ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Encoded as ziplist */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_ENCODING_INTSET 6  ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Encoded as intset */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_ENCODING_SKIPLIST 7  ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Encoded as skiplist */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_ENCODING_EMBSTR 8  ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Embedded sds string encoding */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_ENCODING_QUICKLIST 9 ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Encoded as linked list of ziplists */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" OBJ_ENCODING_STREAM 10 ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Encoded as a radix tree of listpacks */")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("ziplist（特殊的双向链表）")])]),t._v(" "),a("li",[a("p",[t._v("quicklist（快速索引表）")])]),t._v(" "),a("li",[a("p",[t._v("skiplist（跳表）")])]),t._v(" "),a("li",[a("p",[t._v("intset（int集合）")])])]),t._v(" "),a("h2",{attrs:{id:"redis-持久化策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-持久化策略"}},[t._v("#")]),t._v(" Redis 持久化策略")]),t._v(" "),a("ul",[a("li",[t._v("rdb")]),t._v(" "),a("li",[t._v("aof")]),t._v(" "),a("li",[t._v("mix 混合持久化")]),t._v(" "),a("li",[t._v("为什么会出现混合持久化策略，何时进行压缩？")]),t._v(" "),a("li",[t._v("生产环境应主要用哪种持久化策略")])]),t._v(" "),a("h2",{attrs:{id:"redis-的过期删除策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-的过期删除策略"}},[t._v("#")]),t._v(" Redis 的过期删除策略")]),t._v(" "),a("p",[a("strong",[t._v("Redis的过期删除策略有两种，一种被动删除，一种主动删除。")])]),t._v(" "),a("p",[a("strong",[t._v("key过期信息存储为绝对的Unix时间戳（ms），这代表Redis的过期策略，对宿主机器时间的稳定性有强要求。")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("当有客户端访问一个key时，Redis会检测这个key是否过期，如果过期，会删除这个key。")])]),t._v(" "),a("li",[a("p",[t._v('CPU空闲时，执行serverCron定时任务，执行周期为每秒10次（可通过修改配置属性"hz"来修改执行周期），任务分为以下几个步骤：')]),t._v(" "),a("ol",[a("li",[t._v("每次过期清理时间不超过CPU时间的25%，")]),t._v(" "),a("li",[t._v("随机选择20个key，判断它们是否过期，如果过期，则删除，")]),t._v(" "),a("li",[t._v("如果发现一次选择中，有超过25%（默认情况下就是5个）的key都过期了，则重复步骤2，直到随机选择中，过期的key百分比低于25%。")])])])]),t._v(" "),a("h3",{attrs:{id:"副本和aof文件的过期key处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#副本和aof文件的过期key处理"}},[t._v("#")]),t._v(" 副本和aof文件的过期key处理")]),t._v(" "),a("p",[t._v("当Redis判断一组key过期后，就会对这些key同时执行del命令。")]),t._v(" "),a("p",[t._v("这样的话，过期删除的操作就集中在master实例上，aof文件和副本只需要添加和执行同步过来的命令即可。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// expire.c")]),t._v("\n")])])]),a("h2",{attrs:{id:"redis-的内存逐出策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-的内存逐出策略"}},[t._v("#")]),t._v(" Redis 的内存逐出策略")]),t._v(" "),a("p",[t._v("逐出算法有两大类：")]),t._v(" "),a("ul",[a("li",[t._v("LRU")]),t._v(" "),a("li",[t._v("LFU(Least Frequently Used, 4.0+)")])]),t._v(" "),a("p",[t._v("可选的逐出算法：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("no-enviction（驱逐）：禁止驱逐数据，")]),t._v(" "),a("hr")]),t._v(" "),a("li",[a("p",[t._v("volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中的key使用lru算法淘汰，")])]),t._v(" "),a("li",[a("p",[t._v("allkeys-lru：从数据集（server.db[i].dict）中的key使用lru算法淘汰，")]),t._v(" "),a("hr")]),t._v(" "),a("li",[a("p",[t._v("volatile-lfu：对所有设置了过期时间的key使用LFU算法进行淘汰，")])]),t._v(" "),a("li",[a("p",[t._v("allkeys-lfu：对所有key使用LFU算法进行淘汰，")]),t._v(" "),a("hr")]),t._v(" "),a("li",[a("p",[t._v("volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰，")]),t._v(" "),a("hr")]),t._v(" "),a("li",[a("p",[t._v("volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰，")])]),t._v(" "),a("li",[a("p",[t._v("allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰。")])])]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// evict.c")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("freeMemoryIfNeededAndSafe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当没有lua脚本执行，并且server不在加载状态时执行freeMemoryIfNeeded()")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lua_timedout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loading"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" C_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("freeMemoryIfNeeded")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据逐出策略来清理内存")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("freeMemoryIfNeeded")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认情况下slave不需要执行内存逐出方法，只需要执行master的命令即可，")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("masterhost "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("repl_slave_ignore_maxmemory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" C_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过getMaxmemoryState函数，获得当前要释放多少内存mem_tofree")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMaxmemoryState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mem_reported"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mem_tofree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" C_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" C_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 当Redis需要清理内存，但是逐出策略又是："MAXMEMORY_NO_EVICTION"（禁止逐出）时，跳转到cant_free代码块')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxmemory_policy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" MAXMEMORY_NO_EVICTION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" cant_free"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* We need to free memory, but policy forbids. */")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mem_freed "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" mem_tofree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sds bestkey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bestdbid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lru算法、lfu算法、过期键删除")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxmemory_policy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MAXMEMORY_FLAG_LRU"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("MAXMEMORY_FLAG_LFU"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n            server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxmemory_policy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" MAXMEMORY_VOLATILE_TTL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 随机删除")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* volatile-random and allkeys-random policy */")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxmemory_policy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" MAXMEMORY_ALLKEYS_RANDOM "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n                 server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxmemory_policy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" MAXMEMORY_VOLATILE_RANDOM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除所选的key")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Finally remove the selected key. */")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bestkey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            db "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("db"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("bestdbid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取当前已使用的内存")]),t._v("\n            delta "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("zmalloc_used_memory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("latencyStartMonitor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eviction_latency"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否为异步删除")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lazyfree_lazy_eviction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dbAsyncDelete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("keyobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dbSyncDelete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("keyobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("signalModifiedKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("db"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("keyobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("latencyEndMonitor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eviction_latency"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("latencyAddSampleIfNeeded")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eviction-del"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("eviction_latency"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算释放了多少内存")]),t._v("\n            delta "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("zmalloc_used_memory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            mem_freed "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" delta"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当需要释放的内存很大时，在这里可能会花费很多时间，所以循环内部会调用flushSlavesOutputBuffers函数强制刷新到slave")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slaves"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("flushSlavesOutputBuffers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          \t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前线程在释放内存时，也有可能其他线程会删除key，所以此处判断一次当前内存是否已降到目标内存（大概是这个意思）")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lazyfree_lazy_eviction "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keys_freed "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMaxmemoryState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" C_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Let's satisfy our stop condition. */")]),t._v("\n                    mem_freed "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mem_tofree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" cant_free"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* nothing to free... */")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" C_OK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cant_free只做了一件事情，那就是检查lazyfree线程是否还有任务要执行，然后等待")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* When evicting a random key, we try to evict a key for\n             * each DB, so we use the static 'next_db' variable to\n             * incrementally visit all DBs. */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 随机删除的策略比较简单，循环遍历每个db，")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果策略是MAXMEMORY_ALLKEYS_RANDOM，获取db-dict，从全部key中随机选择")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果策略是MAXMEMORY_VOLATILE_RANDOM，则获取db->expires，从设置了过期时间的key中随机选择")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dbnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    j "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("next_db"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dbnum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    db "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("db"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dict "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxmemory_policy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" MAXMEMORY_ALLKEYS_RANDOM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n      db"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("dict "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" db"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("expires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      de "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictGetRandomKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      bestkey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictGetKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("de"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      bestdbid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n")])])]),a("h2",{attrs:{id:"缓存的三大问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存的三大问题"}},[t._v("#")]),t._v(" 缓存的三大问题")]),t._v(" "),a("h3",{attrs:{id:"缓存击穿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿"}},[t._v("#")]),t._v(" 缓存击穿")]),t._v(" "),a("p",[a("strong",[t._v("当许多请求在访问同一个key时，这个key失效了，导致大量请求打到数据库上。")])]),t._v(" "),a("h4",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),a("p",[t._v("数据库的访问量突增，压力变大，可能会导致数据库宕机。")]),t._v(" "),a("h4",{attrs:{id:"解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),a("p",[t._v("加锁，当缓存的key为空时，对第一个到数据查询的线程加锁，把其他线程拦在后边，当第一个线程查询到数据，然后重建缓存后，其他线程就可以直接从缓存中获取数据。")]),t._v(" "),a("h3",{attrs:{id:"缓存穿透"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[t._v("#")]),t._v(" 缓存穿透")]),t._v(" "),a("p",[a("strong",[t._v("查询不存在的数据，比如说，缓存和数据库中都没有查询key，导致每次都要到数据库中查询。")])]),t._v(" "),a("h4",{attrs:{id:"问题-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题-2"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),a("p",[t._v("如果有黑客使用不存在的key对系统进行访问，就会导致全部的请求打到数据库上，数据库的访问量突增，压力变大，可能会导致数据库宕机。")]),t._v(" "),a("h4",{attrs:{id:"解决方案-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案-2"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),a("ol",[a("li",[t._v("缓存null值")]),t._v(" "),a("li",[t._v("BloomFilter")])]),t._v(" "),a("h3",{attrs:{id:"缓存雪崩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[t._v("#")]),t._v(" 缓存雪崩")]),t._v(" "),a("p",[a("strong",[t._v("在某一时刻，大量和缓存失效，导致原本应该访问缓存的请求全部打在数据库上。")])]),t._v(" "),a("h4",{attrs:{id:"问题-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题-3"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),a("p",[t._v("大量缓存失效，导致全部的请求打到数据库上，数据库的访问量突增，压力变大，可能会导致数据库宕机。")]),t._v(" "),a("h4",{attrs:{id:"解决方案-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案-3"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),a("h3",{attrs:{id:"热点key集中失效（缓存雪崩的变种）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#热点key集中失效（缓存雪崩的变种）"}},[t._v("#")]),t._v(" 热点key集中失效（缓存雪崩的变种）")]),t._v(" "),a("h4",{attrs:{id:"解决方案-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决方案-4"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),a("p",[t._v("给不同的key设置不同的缓存时间，比如说，在固定时间上再加一个随机值。")]),t._v(" "),a("h3",{attrs:{id:"延伸问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#延伸问题"}},[t._v("#")]),t._v(" 延伸问题")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("缓存和数据库的双写一致性")])]),t._v(" "),a("li",[a("p",[t._v("大key是如何产生的，多大算大key")])]),t._v(" "),a("li",[a("p",[t._v("热key产生的原因及解决方案")])])]),t._v(" "),a("h2",{attrs:{id:"redis-主从配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-主从配置"}},[t._v("#")]),t._v(" Redis 主从配置")]),t._v(" "),a("h2",{attrs:{id:"redis-sentinel-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-sentinel-配置"}},[t._v("#")]),t._v(" Redis Sentinel 配置")]),t._v(" "),a("h2",{attrs:{id:"redis-cluster-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis-cluster-配置"}},[t._v("#")]),t._v(" Redis Cluster 配置")]),t._v(" "),a("h2",{attrs:{id:"布隆过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器"}},[t._v("#")]),t._v(" 布隆过滤器")]),t._v(" "),a("h2",{attrs:{id:"一致性hash算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一致性hash算法"}},[t._v("#")]),t._v(" 一致性hash算法")]),t._v(" "),a("h2",{attrs:{id:"场景分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景分析"}},[t._v("#")]),t._v(" 场景分析")]),t._v(" "),a("h3",{attrs:{id:"如何测试redis支持的最大qps、tps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何测试redis支持的最大qps、tps"}},[t._v("#")]),t._v(" 如何测试Redis支持的最大qps、tps")]),t._v(" "),a("p",[t._v("Redis发行版本中，提供了redis-benchmark性能测试工具，我们可以通过以下命令来测试Redis支持的并发性。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\nredis"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("benchmark "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("host"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("clients"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("requests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("hostname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Server")]),t._v(" hostname "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("          "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Server")]),t._v(" port "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("s "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Server")]),t._v(" socket "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("overrides host and port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Password")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Redis")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Auth")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("clients"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("       "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),t._v(" of parallel connections "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("requests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Total")]),t._v(" number of requests "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("          "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Data")]),t._v(" size of SET"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("GET value in bytes "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("dbnum "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("db"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("       SELECT the specified db number "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("keep alive "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("reconnect "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("P")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("numreq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pipeline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("numreq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" requests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("no pipeline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("q                 "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Quiet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Just")]),t._v(" show query"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("sec values\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("t "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("tests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("         "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Only")]),t._v(" run the comma separated list of tests"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("The")]),t._v(" test\n                    names are the same as the ones produced as output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -h host地址")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -p 端口号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -c 总客户端数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -n 总请求数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -d 每个请求的数据包大小(kb)")]),t._v("\nredis"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("benchmark "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("h "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("c "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("k "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),a("h3",{attrs:{id:"微博场景如何使用redis来维护用户关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微博场景如何使用redis来维护用户关系"}},[t._v("#")]),t._v(" 微博场景如何使用Redis来维护用户关系")]),t._v(" "),a("h3",{attrs:{id:"如何实现排行榜top-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现排行榜top-10"}},[t._v("#")]),t._v(" 如何实现排行榜top 10")]),t._v(" "),a("h3",{attrs:{id:"如何实现点赞功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现点赞功能"}},[t._v("#")]),t._v(" 如何实现点赞功能")]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://zhangtielei.com/posts/server.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis内部数据结构详解"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://redis.io/documentation",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis官方文档"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);
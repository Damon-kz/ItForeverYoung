(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{363:function(t,s,a){t.exports=a.p+"assets/img/Redis-learn-route.81c92393.jpg"},443:function(t,s,a){"use strict";a.r(s);var n=a(43),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"redis-专题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-专题"}},[t._v("#")]),t._v(" Redis 专题")]),t._v(" "),n("p",[n("strong",[t._v("首先，看一下Redis相关知识的脑图。")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(363),alt:"Redis学习路线"}})]),t._v(" "),n("h2",{attrs:{id:"redis是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis是什么"}},[t._v("#")]),t._v(" Redis是什么")]),t._v(" "),n("p",[t._v("Redis是一个开源的，可持久化的内存数据结构存储服务，可用作数据库、缓存、消息代理。")]),t._v(" "),n("p",[t._v("它支持多种数据结构如string，list，hash，set，sorted set，bitmap，stream等。")]),t._v(" "),n("p",[t._v("并且，它还提供了Redis sentinel、Redis cluster两种高可用架构。")]),t._v(" "),n("h2",{attrs:{id:"redis-为什么快"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-为什么快"}},[t._v("#")]),t._v(" Redis 为什么快")]),t._v(" "),n("ol",[n("li",[t._v("基于内存")]),t._v(" "),n("li",[t._v("单线程")]),t._v(" "),n("li",[t._v("IO多路复用机制")])]),t._v(" "),n("h2",{attrs:{id:"redis-持久化策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-持久化策略"}},[t._v("#")]),t._v(" Redis 持久化策略")]),t._v(" "),n("ul",[n("li",[t._v("rdb")]),t._v(" "),n("li",[t._v("aof")]),t._v(" "),n("li",[t._v("mix 混合持久化")]),t._v(" "),n("li",[t._v("为什么会出现混合持久化策略，何时进行压缩？")]),t._v(" "),n("li",[t._v("生产环境应主要用哪种持久化策略")])]),t._v(" "),n("h2",{attrs:{id:"redis-的过期删除策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-的过期删除策略"}},[t._v("#")]),t._v(" Redis 的过期删除策略")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// redis.conf")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置serverCron任务每秒检测几次")]),t._v("\nhz "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])])]),n("p",[n("strong",[t._v("Redis的过期删除策略有两种，一种被动删除，一种主动删除。")])]),t._v(" "),n("p",[n("strong",[t._v("key过期信息存储为绝对的Unix时间戳（ms），这代表Redis的过期策略，对宿主机器时间的稳定性有强要求。")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("当有客户端访问一个key时，Redis会检测这个key是否过期，如果过期，会删除这个key。")])]),t._v(" "),n("li",[n("p",[t._v('CPU空闲时，执行serverCron定时任务，执行周期为每秒10次（可通过修改配置属性"hz"来修改执行周期），任务分为以下几个步骤：')]),t._v(" "),n("ol",[n("li",[t._v("每次过期清理时间不超过CPU时间的25%，")]),t._v(" "),n("li",[t._v("随机选择20个key，判断它们是否过期，如果过期，则删除，")]),t._v(" "),n("li",[t._v("如果发现一次选择中，有超过25%（默认情况下就是5个）的key都过期了，则重复步骤2，直到随机选择中，过期的key百分比低于25%。")])])])]),t._v(" "),n("h3",{attrs:{id:"副本和aof文件的过期key处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#副本和aof文件的过期key处理"}},[t._v("#")]),t._v(" 副本和aof文件的过期key处理")]),t._v(" "),n("p",[t._v("当Redis判断一组key过期后，就会对这些key同时执行del命令。")]),t._v(" "),n("p",[t._v("这样的话，过期删除的操作就集中在master实例上，aof文件和副本只需要添加和执行同步过来的命令即可。")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// expire.c")]),t._v("\n")])])]),n("h2",{attrs:{id:"redis-的内存逐出策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#redis-的内存逐出策略"}},[t._v("#")]),t._v(" Redis 的内存逐出策略")]),t._v(" "),n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// redis.conf")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置为0代表没有内存限制")]),t._v("\nmaxmemory "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("mb\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置内存淘汰策略")]),t._v("\nmaxmemory-policy noeviction\nmaxmemory-samples "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),n("p",[t._v("逐出算法有两大类：")]),t._v(" "),n("ul",[n("li",[t._v("LRU，最近最少使用逐出")]),t._v(" "),n("li",[t._v("LFU(Least Frequently Used, 4.0+)，最不常用逐出")])]),t._v(" "),n("p",[t._v("可选的逐出算法：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("no-enviction（驱逐）：禁止驱逐数据，")]),t._v(" "),n("hr")]),t._v(" "),n("li",[n("p",[t._v("volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中的key使用lru算法淘汰，")])]),t._v(" "),n("li",[n("p",[t._v("allkeys-lru：从数据集（server.db[i].dict）中的key使用lru算法淘汰，")]),t._v(" "),n("hr")]),t._v(" "),n("li",[n("p",[t._v("volatile-lfu：对所有设置了过期时间的key使用LFU算法进行淘汰，")])]),t._v(" "),n("li",[n("p",[t._v("allkeys-lfu：对所有key使用LFU算法进行淘汰，")]),t._v(" "),n("hr")]),t._v(" "),n("li",[n("p",[t._v("volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰，")]),t._v(" "),n("hr")]),t._v(" "),n("li",[n("p",[t._v("volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰，")])]),t._v(" "),n("li",[n("p",[t._v("allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰。")])])]),t._v(" "),n("p",[n("strong",[t._v("注，volatile-lru、volatile-ttl、volatile-random在没有符合条件（即所有的key都没有设置过期时间）的key时，逐出行为和no-enviction一致。")])]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// evict.c")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("freeMemoryIfNeededAndSafe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当没有lua脚本执行，并且server不在加载状态时执行freeMemoryIfNeeded()")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lua_timedout "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loading"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" C_OK"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("freeMemoryIfNeeded")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根据逐出策略来清理内存")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("freeMemoryIfNeeded")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认情况下slave不需要执行内存逐出方法，只需要执行master的命令即可，")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("masterhost "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("repl_slave_ignore_maxmemory"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" C_OK"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过getMaxmemoryState函数，获得当前要释放多少内存mem_tofree")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMaxmemoryState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mem_reported"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("mem_tofree"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" C_OK"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" C_OK"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 当Redis需要清理内存，但是逐出策略又是："MAXMEMORY_NO_EVICTION"（禁止逐出）时，跳转到cant_free代码块')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxmemory_policy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" MAXMEMORY_NO_EVICTION"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" cant_free"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* We need to free memory, but policy forbids. */")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mem_freed "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" mem_tofree"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sds bestkey "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" bestdbid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lru算法、lfu算法、过期键删除")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxmemory_policy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MAXMEMORY_FLAG_LRU"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("MAXMEMORY_FLAG_LFU"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n            server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxmemory_policy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" MAXMEMORY_VOLATILE_TTL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 随机删除")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* volatile-random and allkeys-random policy */")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxmemory_policy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" MAXMEMORY_ALLKEYS_RANDOM "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n                 server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxmemory_policy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" MAXMEMORY_VOLATILE_RANDOM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除所选的key")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Finally remove the selected key. */")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bestkey"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            db "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("db"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("bestdbid"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取当前已使用的内存")]),t._v("\n            delta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("zmalloc_used_memory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("latencyStartMonitor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eviction_latency"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否为异步删除")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lazyfree_lazy_eviction"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dbAsyncDelete")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("keyobj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dbSyncDelete")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("keyobj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("signalModifiedKey")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("db"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("keyobj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("latencyEndMonitor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("eviction_latency"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("latencyAddSampleIfNeeded")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eviction-del"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("eviction_latency"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算释放了多少内存")]),t._v("\n            delta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("zmalloc_used_memory")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            mem_freed "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" delta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当需要释放的内存很大时，在这里可能会花费很多时间，所以循环内部会调用flushSlavesOutputBuffers函数强制刷新到slave")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("slaves"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("flushSlavesOutputBuffers")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          \t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前线程在释放内存时，也有可能其他线程会删除key，所以此处判断一次当前内存是否已降到目标内存（大概是这个意思）")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lazyfree_lazy_eviction "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keys_freed "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMaxmemoryState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" C_OK"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Let's satisfy our stop condition. */")]),t._v("\n                    mem_freed "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mem_tofree"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" cant_free"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* nothing to free... */")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" C_OK"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cant_free只做了一件事情，那就是检查lazyfree线程是否还有任务要执行，然后等待")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* When evicting a random key, we try to evict a key for\n             * each DB, so we use the static 'next_db' variable to\n             * incrementally visit all DBs. */")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 随机删除的策略比较简单，循环遍历每个db，")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果策略是MAXMEMORY_ALLKEYS_RANDOM，获取db-dict，从全部key中随机选择")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果策略是MAXMEMORY_VOLATILE_RANDOM，则获取db->expires，从设置了过期时间的key中随机选择")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dbnum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    j "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("next_db"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dbnum"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    db "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("db"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    dict "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("server"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maxmemory_policy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" MAXMEMORY_ALLKEYS_RANDOM"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n      db"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("dict "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" db"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("expires"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictSize")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      de "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictGetRandomKey")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dict"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      bestkey "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("dictGetKey")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("de"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      bestdbid "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" j"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n")])])]),n("h2",{attrs:{id:"布隆过滤器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#布隆过滤器"}},[t._v("#")]),t._v(" 布隆过滤器")]),t._v(" "),n("h2",{attrs:{id:"一致性hash算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一致性hash算法"}},[t._v("#")]),t._v(" 一致性hash算法")]),t._v(" "),n("h2",{attrs:{id:"场景分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#场景分析"}},[t._v("#")]),t._v(" 场景分析")]),t._v(" "),n("h3",{attrs:{id:"如何测试redis支持的最大qps、tps"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何测试redis支持的最大qps、tps"}},[t._v("#")]),t._v(" 如何测试Redis支持的最大qps、tps")]),t._v(" "),n("p",[t._v("Redis发行版本中，提供了redis-benchmark性能测试工具，我们可以通过以下命令来测试Redis支持的并发性。")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\nredis"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("benchmark "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("h "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("host"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("c "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("clients"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("requests"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("k "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("h "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("hostname"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("      "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Server")]),t._v(" hostname "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("          "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Server")]),t._v(" port "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("s "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("socket"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Server")]),t._v(" socket "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("overrides host and port"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("password"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("      "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Password")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Redis")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Auth")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("c "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("clients"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("       "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),t._v(" of parallel connections "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("n "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("requests"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("      "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Total")]),t._v(" number of requests "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("          "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Data")]),t._v(" size of SET"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("GET value in bytes "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("dbnum "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("db"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("       SELECT the specified db number "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("k "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("       "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("keep alive "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("reconnect "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("P")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("numreq"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pipeline")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("numreq"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" requests"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("no pipeline"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("q                 "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Quiet")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Just")]),t._v(" show query"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("sec values\n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("t "),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("tests"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("         "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Only")]),t._v(" run the comma separated list of tests"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("The")]),t._v(" test\n                    names are the same as the ones produced as output"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -h host地址")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -p 端口号")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -c 总客户端数")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -n 总请求数")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -d 每个请求的数据包大小(kb)")]),t._v("\nredis"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("benchmark "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("h "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("c "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("n "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100000")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("d "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("k "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),n("h2",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"http://zhangtielei.com/posts/server.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis内部数据结构详解"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://redis.io/documentation",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis官方文档"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);
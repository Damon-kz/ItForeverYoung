(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{392:function(a,t,r){"use strict";r.r(t);var e=r(43),s=Object(e.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"java-专题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-专题"}},[a._v("#")]),a._v(" Java 专题")]),a._v(" "),r("h2",{attrs:{id:"源码理解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#源码理解"}},[a._v("#")]),a._v(" 源码理解")]),a._v(" "),r("h3",{attrs:{id:"cyclicbarrier（栅栏机制）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier（栅栏机制）"}},[a._v("#")]),a._v(" CyclicBarrier（栅栏机制）")]),a._v(" "),r("h3",{attrs:{id:"countdownlatch（线程计数器）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch（线程计数器）"}},[a._v("#")]),a._v(" CountDownLatch（线程计数器）")]),a._v(" "),r("h3",{attrs:{id:"cyclicbarrier和countdownlatch的区别，从源码级别看"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier和countdownlatch的区别，从源码级别看"}},[a._v("#")]),a._v(" CyclicBarrier和CountDownLatch的区别，从源码级别看")]),a._v(" "),r("h3",{attrs:{id:"semaphore（信号量）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#semaphore（信号量）"}},[a._v("#")]),a._v(" Semaphore（信号量）")]),a._v(" "),r("h3",{attrs:{id:"atomic"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#atomic"}},[a._v("#")]),a._v(" Atomic*")]),a._v(" "),r("h3",{attrs:{id:"cas"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cas"}},[a._v("#")]),a._v(" CAS")]),a._v(" "),r("h4",{attrs:{id:"什么是cas"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是cas"}},[a._v("#")]),a._v(" 什么是CAS")]),a._v(" "),r("h4",{attrs:{id:"什么是aba问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是aba问题"}},[a._v("#")]),a._v(" 什么是ABA问题")]),a._v(" "),r("h3",{attrs:{id:"unsafe"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#unsafe"}},[a._v("#")]),a._v(" UnSafe")]),a._v(" "),r("h3",{attrs:{id:"优先级队列的底层原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优先级队列的底层原理"}},[a._v("#")]),a._v(" 优先级队列的底层原理")]),a._v(" "),r("h2",{attrs:{id:"线程池的实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程池的实现"}},[a._v("#")]),a._v(" 线程池的实现")]),a._v(" "),r("h3",{attrs:{id:"executor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#executor"}},[a._v("#")]),a._v(" Executor")]),a._v(" "),r("h3",{attrs:{id:"executeservice"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#executeservice"}},[a._v("#")]),a._v(" ExecuteService")]),a._v(" "),r("h3",{attrs:{id:"threadpoolexecutor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor"}},[a._v("#")]),a._v(" ThreadPoolExecutor")]),a._v(" "),r("p",[r("strong",[a._v("七个参数")])]),a._v(" "),r("h3",{attrs:{id:"executors（工厂类）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#executors（工厂类）"}},[a._v("#")]),a._v(" Executors（工厂类）")]),a._v(" "),r("h3",{attrs:{id:"线程有几种状态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程有几种状态"}},[a._v("#")]),a._v(" 线程有几种状态")]),a._v(" "),r("p",[r("strong",[a._v("六种状态")])]),a._v(" "),r("div",{staticClass:"language-java extra-class"},[r("pre",{pre:!0,attrs:{class:"language-java"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("enum")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("State")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n         * Thread state for a thread which has not yet started.\n         */")]),a._v("\n        NEW"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n\n        "),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n         * Thread state for a runnable thread.  A thread in the runnable\n         * state is executing in the Java virtual machine but it may\n         * be waiting for other resources from the operating system\n         * such as processor.\n         */")]),a._v("\n        RUNNABLE"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n\n        "),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n         * Thread state for a thread blocked waiting for a monitor lock.\n         * A thread in the blocked state is waiting for a monitor lock\n         * to enter a synchronized block/method or\n         * reenter a synchronized block/method after calling\n         * {@link Object#wait() Object.wait}.\n         */")]),a._v("\n        BLOCKED"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n\n        "),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n         * Thread state for a waiting thread.\n         * A thread is in the waiting state due to calling one of the\n         * following methods:\n         * <ul>\n         *   <li>{@link Object#wait() Object.wait} with no timeout</li>\n         *   <li>{@link #join() Thread.join} with no timeout</li>\n         *   <li>{@link LockSupport#park() LockSupport.park}</li>\n         * </ul>\n         *\n         * <p>A thread in the waiting state is waiting for another thread to\n         * perform a particular action.\n         *\n         * For example, a thread that has called <tt>Object.wait()</tt>\n         * on an object is waiting for another thread to call\n         * <tt>Object.notify()</tt> or <tt>Object.notifyAll()</tt> on\n         * that object. A thread that has called <tt>Thread.join()</tt>\n         * is waiting for a specified thread to terminate.\n         */")]),a._v("\n        WAITING"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n\n        "),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n         * Thread state for a waiting thread with a specified waiting time.\n         * A thread is in the timed waiting state due to calling one of\n         * the following methods with a specified positive waiting time:\n         * <ul>\n         *   <li>{@link #sleep Thread.sleep}</li>\n         *   <li>{@link Object#wait(long) Object.wait} with timeout</li>\n         *   <li>{@link #join(long) Thread.join} with timeout</li>\n         *   <li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li>\n         *   <li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li>\n         * </ul>\n         */")]),a._v("\n        TIMED_WAITING"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n\n        "),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n         * Thread state for a terminated thread.\n         * The thread has completed execution.\n         */")]),a._v("\n        TERMINATED"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),r("h3",{attrs:{id:"下面几种方法的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#下面几种方法的区别"}},[a._v("#")]),a._v(" 下面几种方法的区别")]),a._v(" "),r("h3",{attrs:{id:"run-和start-区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#run-和start-区别"}},[a._v("#")]),a._v(" run()和start()区别")]),a._v(" "),r("h4",{attrs:{id:"sleep"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sleep"}},[a._v("#")]),a._v(" sleep()")]),a._v(" "),r("h4",{attrs:{id:"yield"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yield"}},[a._v("#")]),a._v(" yield()")]),a._v(" "),r("h4",{attrs:{id:"interrupt"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#interrupt"}},[a._v("#")]),a._v(" interrupt()")]),a._v(" "),r("h4",{attrs:{id:"join"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[a._v("#")]),a._v(" join()")]),a._v(" "),r("h3",{attrs:{id:"线程池参数设定，为什么这么设定，作用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程池参数设定，为什么这么设定，作用"}},[a._v("#")]),a._v(" 线程池参数设定，为什么这么设定，作用")]),a._v(" "),r("h2",{attrs:{id:"集合"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[a._v("#")]),a._v(" 集合")]),a._v(" "),r("h3",{attrs:{id:"链表的层次变量"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#链表的层次变量"}},[a._v("#")]),a._v(" 链表的层次变量")]),a._v(" "),r("h2",{attrs:{id:"代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[a._v("#")]),a._v(" 代理")]),a._v(" "),r("h3",{attrs:{id:"静态代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#静态代理"}},[a._v("#")]),a._v(" 静态代理")]),a._v(" "),r("h3",{attrs:{id:"动态代理（理解原理）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态代理（理解原理）"}},[a._v("#")]),a._v(" 动态代理（理解原理）")]),a._v(" "),r("ul",[r("li",[a._v("Java Proxy")]),a._v(" "),r("li",[a._v("CGLIB")])]),a._v(" "),r("h2",{attrs:{id:"java-锁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-锁"}},[a._v("#")]),a._v(" Java 锁")]),a._v(" "),r("h3",{attrs:{id:"为什么会发生死锁，如何制造一个死锁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么会发生死锁，如何制造一个死锁"}},[a._v("#")]),a._v(" 为什么会发生死锁，如何制造一个死锁")]),a._v(" "),r("h2",{attrs:{id:"关键字理解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关键字理解"}},[a._v("#")]),a._v(" 关键字理解")]),a._v(" "),r("h3",{attrs:{id:"static"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#static"}},[a._v("#")]),a._v(" static")]),a._v(" "),r("h3",{attrs:{id:"final"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#final"}},[a._v("#")]),a._v(" final")]),a._v(" "),r("h3",{attrs:{id:"synchronized"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[a._v("#")]),a._v(" synchronized")]),a._v(" "),r("h4",{attrs:{id:"底层实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#底层实现"}},[a._v("#")]),a._v(" 底层实现")]),a._v(" "),r("h4",{attrs:{id:"jdk-6之后的锁优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jdk-6之后的锁优化"}},[a._v("#")]),a._v(" jdk 6之后的锁优化")]),a._v(" "),r("ul",[r("li",[a._v("偏向锁 -> 轻量级锁 -> 重量级锁")]),a._v(" "),r("li",[a._v("锁粗化")]),a._v(" "),r("li",[a._v("锁消除")])]),a._v(" "),r("h4",{attrs:{id:"和reentrantlock的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#和reentrantlock的区别"}},[a._v("#")]),a._v(" 和ReentrantLock的区别")]),a._v(" "),r("h4",{attrs:{id:"使用synchronized实现单缓冲区的生产者消费者模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用synchronized实现单缓冲区的生产者消费者模型"}},[a._v("#")]),a._v(" 使用synchronized实现单缓冲区的生产者消费者模型")]),a._v(" "),r("h3",{attrs:{id:"volatile"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[a._v("#")]),a._v(" volatile")]),a._v(" "),r("h4",{attrs:{id:"指令重排"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#指令重排"}},[a._v("#")]),a._v(" 指令重排")]),a._v(" "),r("h4",{attrs:{id:"内存屏障"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存屏障"}},[a._v("#")]),a._v(" 内存屏障")]),a._v(" "),r("h4",{attrs:{id:"总线风暴"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总线风暴"}},[a._v("#")]),a._v(" 总线风暴")]),a._v(" "),r("ul",[r("li",[a._v("可见性")]),a._v(" "),r("li",[a._v("有序性")]),a._v(" "),r("li",[a._v("为什么不能保证原子性")])]),a._v(" "),r("h2",{attrs:{id:"jmm（java-内存模型）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jmm（java-内存模型）"}},[a._v("#")]),a._v(" JMM（Java 内存模型）")]),a._v(" "),r("h3",{attrs:{id:"三大特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三大特性"}},[a._v("#")]),a._v(" 三大特性")]),a._v(" "),r("ul",[r("li",[a._v("可见性")]),a._v(" "),r("li",[a._v("有序性")]),a._v(" "),r("li",[a._v("原子性")])]),a._v(" "),r("h3",{attrs:{id:"as-if-serial"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#as-if-serial"}},[a._v("#")]),a._v(" as-if-serial")]),a._v(" "),r("h3",{attrs:{id:"happens-before"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#happens-before"}},[a._v("#")]),a._v(" happens-before")]),a._v(" "),r("h3",{attrs:{id:"mesi-cpu缓存一致性协议"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mesi-cpu缓存一致性协议"}},[a._v("#")]),a._v(" mesi - CPU缓存一致性协议")]),a._v(" "),r("h2",{attrs:{id:"其他"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[a._v("#")]),a._v(" 其他")]),a._v(" "),r("h3",{attrs:{id:"object类有哪些方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object类有哪些方法"}},[a._v("#")]),a._v(" Object类有哪些方法")]),a._v(" "),r("h4",{attrs:{id:"native-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#native-方法"}},[a._v("#")]),a._v(" native 方法")]),a._v(" "),r("ul",[r("li",[a._v("getClass()")]),a._v(" "),r("li",[a._v("hashCode()")]),a._v(" "),r("li",[a._v("clone()")]),a._v(" "),r("li",[a._v("notify()")]),a._v(" "),r("li",[a._v("notifyAll()")]),a._v(" "),r("li",[a._v("wait(long)")])]),a._v(" "),r("h4",{attrs:{id:"java-方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-方法"}},[a._v("#")]),a._v(" Java 方法")]),a._v(" "),r("ul",[r("li",[a._v("equals()")]),a._v(" "),r("li",[a._v("toString()")]),a._v(" "),r("li",[a._v("wait()")]),a._v(" "),r("li",[a._v("wait(long, int)")]),a._v(" "),r("li",[a._v("finalize()")])]),a._v(" "),r("h4",{attrs:{id:"接口的默认方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口的默认方法"}},[a._v("#")]),a._v(" 接口的默认方法")]),a._v(" "),r("h3",{attrs:{id:"hashmap-和-hashset-的区别？hashset-是如何检查重复的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashset-的区别？hashset-是如何检查重复的"}},[a._v("#")]),a._v(" HashMap 和 HashSet 的区别？HashSet 是如何检查重复的")]),a._v(" "),r("p",[a._v("查看源码可以发现，HashSet内部其实是维护了一个HashMap的对象，HashSet的value作为key到了HashMap中。")]),a._v(" "),r("h3",{attrs:{id:"jni-java-native-interface，java本地接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jni-java-native-interface，java本地接口"}},[a._v("#")]),a._v(" JNI(Java native interface，Java本地接口)")])])}),[],!1,null,null,null);t.default=s.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{391:function(t,a,s){"use strict";s.r(a);var r=s(42),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"leetcode-刷题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-刷题"}},[t._v("#")]),t._v(" LeetCode 刷题")]),t._v(" "),s("h2",{attrs:{id:"二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[t._v("#")]),t._v(" 二叉树")]),t._v(" "),s("h2",{attrs:{id:"链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),s("h3",{attrs:{id:"翻转单链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#翻转单链表"}},[t._v("#")]),t._v(" 翻转单链表")]),t._v(" "),s("h2",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("h2",{attrs:{id:"队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),s("h2",{attrs:{id:"栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),s("h2",{attrs:{id:"二分查找"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二分查找"}},[t._v("#")]),t._v(" 二分查找")]),t._v(" "),s("h2",{attrs:{id:"动态规划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[t._v("#")]),t._v(" 动态规划")]),t._v(" "),s("h2",{attrs:{id:"深度优先搜索（dfs）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索（dfs）"}},[t._v("#")]),t._v(" 深度优先搜索（DFS）")]),t._v(" "),s("p",[s("strong",[t._v("使用递归实现")])]),t._v(" "),s("h2",{attrs:{id:"广度优先搜索（bfs）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#广度优先搜索（bfs）"}},[t._v("#")]),t._v(" 广度优先搜索（BFS）")]),t._v(" "),s("p",[s("strong",[t._v("使用队列实现，可用来解层序遍历、最短路径问题。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);